# -*- coding: utf-8 -*-
############################################################
# Generation of Monotop samples with MadGraph5+Pythia8+EvtGen
# Timothee Theveneaux-Pelzer tpelzer@cern.ch
# Monotop models are available here: http://feynrules.irmp.ucl.ac.be/wiki/Monotops
############################################################

############################################################
### List of DSIDs
############################################################
### Semi-leptonic top decays
#    * 302740-302748: Resonant model, aR=0.2, m(fmet)=50GeV, m(S)=500-2500GeV per step of 250GeV
#    * 302749-302751: Resonant model, aR=0.5, m(fmet)=50GeV, m(S)=500-2500GeV per step of 1000GeV
#    * 302752-302754: Resonant model, aR=1.0, m(fmet)=50GeV, m(S)=500-2500GeV per step of 1000GeV
#    * 302755-302757: Resonant model, aR=2.0, m(fmet)=50GeV, m(S)=500-2500GeV per step of 1000GeV
#    * 302758: Resonant model, aR=0.2, m(fmet)=100GeV, m(S)=500GeV
############################################################
#    * 302759-302763: Non-resonant model, aR=0.2, m(vmet)=0-100GeV per step of 25GeV
#    * 302764-302767: Non-resonant model, aR=0.2, m(vmet)=150-300GeV per step of 50GeV
#    * 302768-302776: Non-resonant model, aR=0.2, m(vmet)=500-2500GeV per step of 250GeV
############################################################

from MadGraphControl.MadGraphUtils import *

### Number of events generated by MadGraph
# to cope with efficiencies, must be slightly higher than 5000
nevents=6000

mode=0

### Choice of pdf set
# can be "cteq6l1" "nnpdf23lo" "nnpdf30lo" "mstw2008lo" "mmht2014lo"
# default is "nnpdf23lo", as recommended for Madgraph+Pythia8 with A14 tune
PdfSet = "nnpdf23lo"

# Use of more recent pdf sets needs special LHAPDF configuration
if PdfSet=="mmht2014lo" or PdfSet=="nnpdf30lo":
  import os
  os.environ["LHAPATH"]=os.environ["LHAPDF_DATA_PATH"]=os.environ['LHAPATH'].split(':')[0]+":/cvmfs/sft.cern.ch/lcg/external/lhapdfsets/current/"

### Define process, channel, model, masses, coupling
process="Monotop" # generated process
DSID = runArgs.runNumber
if (DSID>=302740 and DSID<=302748):
  channel="l" # leptonic
  model="R" # resonant model
  MS=500+(DSID%302740)*250 # mass of the resonance
  Mfmet=50 # mass of the invisible fermion
  aR=0.2 # coupling
elif (DSID>=302749 and DSID<=302751):
  channel="l" # leptonic
  model="R" # resonant model
  MS=500+(DSID%302749)*1000 # mass of the resonance
  Mfmet=50 # mass of the invisible fermion
  aR=0.5 # coupling
elif (DSID>=302752 and DSID<=302754):
  channel="l" # leptonic
  model="R" # resonant model
  MS=500+(DSID%302752)*1000 # mass of the resonance
  Mfmet=50 # mass of the invisible fermion
  aR=1.0 # coupling
elif (DSID>=302755 and DSID<=302757):
  channel="l" # leptonic
  model="R" # resonant model
  MS=500+(DSID%302755)*1000 # mass of the resonance
  Mfmet=50 # mass of the invisible fermion
  aR=2.0 # coupling
elif (DSID==302758):
  channel="l" # leptonic
  model="R" # resonant model
  MS=500 # mass of the resonance
  Mfmet=100 # mass of the invisible fermion
  aR=0.2 # coupling
elif (DSID>=302759 and DSID<=302763):
  channel="l" # leptonic
  model="NR" # non-resonant model
  Mvmet=0+(DSID%302759)*25 # mass of the invisible vector
  aR=0.2 # coupling
elif (DSID>=302764 and DSID<=302767):
  channel="l" # leptonic
  model="NR" # non-resonant model
  Mvmet=150+(DSID%302764)*50 # mass of the invisible vector
  aR=0.2 # coupling
elif (DSID>=302768 and DSID<=302776):
  channel="l" # leptonic
  model="NR" # non-resonant model
  Mvmet=500+(DSID%302768)*250 # mass of the invisible vector
  aR=0.2 # coupling
else:
  raise RuntimeError("runNumber %i not recognised in this jobOptions."%DSID)

### Set proc_card
# 4 cases: semi-leptonic or fully-hadronic top decay, resonant or non-resonant model
# top-quark decaying into tb, ts, or td
fcard = open('proc_card_mg5.dat','w')
if (model=="R") and (channel=="l"): # resonant model, leptonic
    fcard.write("""
    import model MonoTops_UFO
    define p = g u c d s u~ c~ d~ s~
    define j = g u c d s b u~ c~ d~ s~ b~
    define l+ = e+ mu+ ta+
    define l- = e- mu- ta-
    define vl = ve vm vt
    define vl~ = ve~ vm~ vt~
    generate p p > t fmet MT1=0 MT2=0 MT3=2 MT4=0, (t > j W+, W+ > l+ vl) @1
    add process p p > t~ fmet MT1=0 MT2=0 MT3=2 MT4=0, (t~ > j W-, W- > l- vl~) @2
    output -f
    """)
    fcard.close()
elif (model=="R") and (channel=="h"): # resonant model, hadronic
    fcard = open('proc_card_mg5.dat','w')
    fcard.write("""
    import model MonoTops_UFO
    define p = g u c d s u~ c~ d~ s~
    define j = g u c d s b u~ c~ d~ s~ b~
    define l+ = e+ mu+ ta+
    define l- = e- mu- ta-
    define vl = ve vm vt
    define vl~ = ve~ vm~ vt~
    generate p p > t fmet MT1=0 MT2=0 MT3=2 MT4=0, (t > j W+, W+ > j j) @1
    add process p p > t~ fmet MT1=0 MT2=0 MT3=2 MT4=0, (t~ > j W-, W- > j j) @1
    output -f
    """)
    fcard.close()
elif (model=="NR") and (channel=="l"): # non-resonant model, leptonic
    fcard = open('proc_card_mg5.dat','w')
    fcard.write("""
    import model MonoTops_UFO
    define p = g u c d s u~ c~ d~ s~
    define j = g u c d s b u~ c~ d~ s~ b~
    define l+ = e+ mu+ ta+
    define l- = e- mu- ta-
    define vl = ve vm vt
    define vl~ = ve~ vm~ vt~
    generate p p > t vmet MT1=0 MT2=2 MT3=0 MT4=0, (t > j W+, W+ > l+ vl) @1
    add process p p > t~ vmet MT1=0 MT2=2 MT3=0 MT4=0, (t~ > j W-, W- > l- vl~) @2
    output -f
    """)
    fcard.close()
elif (model=="NR") and (channel=="h"): # resonant model, hadronic
    fcard = open('proc_card_mg5.dat','w')
    fcard.write("""
    import model MonoTops_UFO
    define p = g u c d s u~ c~ d~ s~
    define j = g u c d s b u~ c~ d~ s~ b~
    define l+ = e+ mu+ ta+
    define l- = e- mu- ta-
    define vl = ve vm vt
    define vl~ = ve~ vm~ vt~
    generate p p > t vmet MT1=0 MT2=2 MT3=0 MT4=0, (t > j W+, W+ > j j) @1
    add process p p > t~ vmet MT1=0 MT2=2 MT3=0 MT4=0, (t~ > j W-, W- > j j) @2
    output -f
    """)
    fcard.close()
else: 
    raise RuntimeError("runNumber %i not recognised in these jobOptions."%DSID)

### Setting beam energy from centre-of-mass energy
beamEnergy=-999
if hasattr(runArgs,'ecmEnergy'):
    beamEnergy = runArgs.ecmEnergy / 2.
else:
    raise RuntimeError("No centre-of-mass energy found.")

### Set parameters different from the ones in default run_card
extras = {  'lhe_version':'2.0',
	    'cut_decays' :'F',
	    'parton_shower':'PYTHIA8',
	    'xqcut':0.,
	    'bwcutoff':25,
	    'ptj':0.,
	    'ptl':0.,
	    'etaj':-1,
	    'etab':-1,
	    'etal':-1,
	    'drjj':0.,
	    'drll':0.,
	    'drjl':0.,
	    'auto_ptj_mjj':'T'}
if PdfSet=="cteq6l1": #CTEQ6L1
  extras['pdlabel']="'cteq6l1'"
elif PdfSet=="nnpdf23lo": #NNPDF23LO
  extras['pdlabel']="'nn23lo'"
elif PdfSet=="mstw2008lo": #MSTW2008lo68cl
  extras['pdlabel']="'lhapdf'"
  extras['lhaid']=21000
elif PdfSet=="mmht2014lo": #MMHT2014lo68cl
  extras['pdlabel']="'lhapdf'"
  extras['lhaid']=25000
elif PdfSet=="nnpdf30lo": #NNPDF30_lo_as_0118
  extras['pdlabel']="'lhapdf'"
  extras['lhaid']=262000
else: # raise error if no pdf was provided
  raise RuntimeError("ERROR: No PDF has been choosen! Please pick one among those available!")
  
### Building run_card
build_run_card(run_card_old=get_default_runcard(), run_card_new='run_card.dat', nevts=nevents, rand_seed=runArgs.randomSeed, beamEnergy=beamEnergy, extras=extras)

### Parameters of the models
if (model=="R"):
  # first check if the masses are defined
  for variable in ["Mfmet","MS"]:
    if (variable not in locals()):
      raise RuntimeError("ERROR: %s was not defined - unable to proceed with resonant model production without this mass"%variable)
  Wfmet=0 # the width of the invisible particle - which is stable - is a dummy value in this model
  # then check if the coupling is defined - it is needed to define the with of the resonance
  if ("aR" not in locals()):
    raise RuntimeError("ERROR: Coupling strength was not defined - it is needed to assess the width of the resonance")
  else:
    if (Mfmet == 50):
      if (aR == 0.2):
        if (MS == 500):
          WS = 3.48
        elif (MS == 750):
          WS = 5.31
        elif (MS == 1000):
          WS = 7.11
        elif (MS == 1250):
          WS = 8.91
        elif (MS == 1500):
          WS = 10.71
        elif (MS == 1750):
          WS = 12.5
        elif (MS == 2000):
          WS = 14.3
        elif (MS == 2250):
          WS = 16.1
        elif (MS == 2500):
          WS = 17.88
        else:
          raise RuntimeError("ERROR: Configuration aR=%s, MS=%s, Mfmet=%s is unknow to this joboptions"%str(aR)%str(MS)%str(Mfmet))
      elif (aR == 0.5):
        if (MS == 500):
          WS = 21.77
        elif (MS == 1500):
          WS = 66.93
        elif (MS == 2500):
          WS = 111.8
        else:
          raise RuntimeError("ERROR: Configuration aR=%s, MS=%s, Mfmet=%s is unknow to this joboptions"%str(aR)%str(MS)%str(Mfmet))
      elif (aR == 1.0):
        if (MS == 500):
          WS = 87.1
        elif (MS == 1500):
          WS = 267.7
        elif (MS == 2500):
          WS = 447.1
        else:
          raise RuntimeError("ERROR: Configuration aR=%s, MS=%s, Mfmet=%s is unknow to this joboptions"%str(aR)%str(MS)%str(Mfmet))
      elif (aR == 2.0):
        if (MS == 500):
          WS = 348.4
        elif (MS == 1500):
          WS = 1071
        elif (MS == 2500):
          WS = 1788
        else:
          raise RuntimeError("ERROR: Configuration aR=%s, MS=%s, Mfmet=%s is unknow to this joboptions"%str(aR)%str(MS)%str(Mfmet))
      else:
        raise RuntimeError("ERROR: Configuration aR=%s, MS=%s, Mfmet=%s is unknow to this joboptions"%str(aR)%str(MS)%str(Mfmet))
    elif (Mfmet == 100):
      if (aR == 0.2):
        if (MS == 500):
          WS = 3.461
        elif (MS == 1000):
          WS = 7.099
        elif (MS == 1500):
          WS = 10.7
        else:
          raise RuntimeError("ERROR: Configuration aR=%s, MS=%s, Mfmet=%s is unknow to this joboptions"%str(aR)%str(MS)%str(Mfmet))
      elif (aR == 0.5):
        if (MS == 500):
          WS = 21.63
        else:
          raise RuntimeError("ERROR: Configuration aR=%s, MS=%s, Mfmet=%s is unknow to this joboptions"%str(aR)%str(MS)%str(Mfmet))
      elif (aR == 1.0):
        if (MS == 500):
          WS = 86.52
        else:
          raise RuntimeError("ERROR: Configuration aR=%s, MS=%s, Mfmet=%s is unknow to this joboptions"%str(aR)%str(MS)%str(Mfmet))
      else:
        raise RuntimeError("ERROR: Configuration aR=%s, MS=%s, Mfmet=%s is unknow to this joboptions"%str(aR)%str(MS)%str(Mfmet))
    elif (Mfmet == 80):
      if (aR == 0.2):
        if (MS == 500):
          WS = 3.472
        else:
          raise RuntimeError("ERROR: Configuration aR=%s, MS=%s, Mfmet=%s is unknow to this joboptions"%str(aR)%str(MS)%str(Mfmet))
      else:
        raise RuntimeError("ERROR: Configuration aR=%s, MS=%s, Mfmet=%s is unknow to this joboptions"%str(aR)%str(MS)%str(Mfmet))
    elif (Mfmet == 60):
      if (aR == 0.2):
        if (MS == 500):
          WS = 3.481
        else:
          raise RuntimeError("ERROR: Configuration aR=%s, MS=%s, Mfmet=%s is unknow to this joboptions"%str(aR)%str(MS)%str(Mfmet))
      else:
        raise RuntimeError("ERROR: Configuration aR=%s, MS=%s, Mfmet=%s is unknow to this joboptions"%str(aR)%str(MS)%str(Mfmet))
    elif (Mfmet == 40):
      if (aR == 0.2):
        if (MS == 500):
          WS = 3.487
        else:
          raise RuntimeError("ERROR: Configuration aR=%s, MS=%s, Mfmet=%s is unknow to this joboptions"%str(aR)%str(MS)%str(Mfmet))
      else:
        raise RuntimeError("ERROR: Configuration aR=%s, MS=%s, Mfmet=%s is unknow to this joboptions"%str(aR)%str(MS)%str(Mfmet))
    elif (Mfmet == 20):
      if (aR == 0.2):
        if (MS == 500):
          WS = 3.491
        else:
          raise RuntimeError("ERROR: Configuration aR=%s, MS=%s, Mfmet=%s is unknow to this joboptions"%str(aR)%str(MS)%str(Mfmet))
      else:
        raise RuntimeError("ERROR: Configuration aR=%s, MS=%s, Mfmet=%s is unknow to this joboptions"%str(aR)%str(MS)%str(Mfmet))
    elif (Mfmet == 0):
      if (aR == 0.2):
        if (MS == 500):
          WS = 3.492
        else:
          raise RuntimeError("ERROR: Configuration aR=%s, MS=%s, Mfmet=%s is unknow to this joboptions"%str(aR)%str(MS)%str(Mfmet))
      else:
        raise RuntimeError("ERROR: Configuration aR=%s, MS=%s, Mfmet=%s is unknow to this joboptions"%str(aR)%str(MS)%str(Mfmet))
    else:
      raise RuntimeError("ERROR: Configuration aR=%s, MS=%s, Mfmet=%s is unknow to this joboptions"%str(aR)%str(MS)%str(Mfmet))
elif (model=="NR"):
  # first check if the mass is defined
  for variable in ["Mvmet"]:
    if (variable not in locals()):
      raise RuntimeError("ERROR: %s was not defined - was not defined - unable to proceed with resonant model without this mass"%variable)
  Wvmet=0 # the width of the invisible particle - which is stable - is a dummy value in this model
else:
  raise RuntimeError("ERROR: Model was not defined - unable to write a consistent param_card.dat")


### Grab default param_card and update its parameters with the ones prepared above
paramcard = subprocess.Popen(['get_files','-data','param_card.Monotop.dat'])
paramcard.wait()
if not os.access('param_card.Monotop.dat',os.R_OK):
    raise RuntimeError("ERROR: Could not get param_card.Monotop.dat")
else:
    old_param_card = open('param_card.Monotop.dat','r')
    new_param_card = open('param_card.dat','w')
    # first check if coupling is defined
    if ("aR" not in locals()):
      raise RuntimeError("ERROR: Coupling strength was not defined - unable to write a consistent param_card.dat")
    else:
      if (model=="R"):
        # first check if all parameters are defined
        for variable in ["Mfmet","MS","Wfmet","Wfmet"] :
          if (variable not in locals()):
            raise RuntimeError("ERROR: %s was not defined - unable to write a consistent param_card.dat for resonant model"%variable)
        # then loop on each line of original param_card.dat
        for line in old_param_card:
          if ' MFM' in line:
            new_param_card.write('9000003 %f # MFM \n'%(Mfmet))
          elif ' MSC' in line:
            new_param_card.write('9000004 %f # MSC \n'%(MS))
          elif ' WFM' in line:
            new_param_card.write('DECAY 9000003 %f # WFM \n'%(Wfmet))
          elif ' WSC' in line:
            new_param_card.write('DECAY 9000004 %f # WSC \n'%(WS))
          elif ' A12S3' in line:
            new_param_card.write('    3 %s # A12S3 \n'%(str(aR/2.)))
          elif ' AQS1x2' in line:
            new_param_card.write('    1   2 %s # AQS1x2 \n'%(str(aR/2.)))
          elif ' AQS2x1' in line:
            new_param_card.write('    2   1 -%s # AQS2x1 \n'%(str(aR/2.)))
          elif ' B12S3' in line:
            new_param_card.write('    3 %s # B12S3 \n'%(str(aR/2.)))
          elif ' BQS1x2' in line:
            new_param_card.write('    1   2 %s # BQS1x2 \n'%(str(aR/2.)))
          elif ' BQS2x1' in line:
            new_param_card.write('    2   1 -%s # BQS2x1 \n'%(str(aR/2.)))
          else:
            new_param_card.write(line)
      elif (model=="NR"):
        # first check if all parameters are defined
        for variable in ["Mvmet","Wvmet"]:
          if (variable not in locals()):
            raise RuntimeError("ERROR: %s was not defined - unable to write a consistent param_card.dat for non-resonant model"%variable)
        # then loop on each line of original param_card.dat
        for line in old_param_card:
          if ' MVM' in line:
            new_param_card.write('9000002 %f # MVM \n'%(Mvmet))
          elif ' WVM' in line:
            new_param_card.write('DECAY 9000002 %f # WVM \n'%(Wvmet))
          elif ' A1FC1x3' in line:
            new_param_card.write('    1   3 %s # A1FC1x3 \n'%(str(aR/2.)))
          elif ' A1FC3x1' in line:
            new_param_card.write('    3   1 %s # A1FC3x1 \n'%(str(aR/2.)))
          elif ' B1FC1x3' in line:
            new_param_card.write('    1   3 %s # B1FC1x3 \n'%(str(aR/2.)))
          elif ' B1FC3x1' in line:
            new_param_card.write('    3   1 %s # B1FC3x1 \n'%(str(aR/2.)))
          else:
            new_param_card.write(line)
      else:
        raise RuntimeError("ERROR: Model was not defined - unable to write a consistent param_card.dat")
    old_param_card.close()
    new_param_card.close()

### Printing a summary of the chosen parameters
if (model=="R"):
  summary="INFO: Events will be generated for "+process+" resonant model, "
  if (channel=="l"):
    summary += "leptonic channel"
  elif (channel=="h"):
    summary += "hadronic channel"
  else:
    raise RuntimeError("channel %s not recognised in this jobOptions."%channel)
  summary+=", MS="+str(MS)+" GeV"
  summary+=", WS="+str(WS)+" GeV"
  summary+=", Mfmet="+str(Mfmet)+" GeV"
  summary+=", Wfmet="+str(Wfmet)+" GeV"
elif (model=="NR"):
  summary="INFO: Events will be generated for "+process+" non-resonant model, "
  if (channel=="l"):
    summary += "leptonic channel"
  elif (channel=="h"):
    summary += "hadronic channel"
  else:
    raise RuntimeError("channel %s not recognised in this jobOptions."%channel)
  summary+=", Mvmet="+str(Mvmet)+" GeV"
  summary+=", Wvmet="+str(Wvmet)+" GeV"
else:
  raise RuntimeError("model %s not recognised in this jobOptions."%model)
summary += ", coupling aR="+str(aR)
mglog.info(summary)

### Printing cards
mglog.info('Now printing cards')
if os.access('proc_card_mg5.dat',os.R_OK):
  mglog.info("proc_card_mg5.dat:")
  procC = subprocess.Popen(['cat','proc_card_mg5.dat'])
  procC.wait()
else:
  mglog.warning('No proc_card_mg5.dat found')
if os.access('run_card.dat',os.R_OK):
  mglog.info("run_card.dat:")
  runC = subprocess.Popen(['cat','run_card.dat'])
  runC.wait()
else:
  mglog.warning('No run_card.dat found')
if os.access('param_card.dat',os.R_OK):
  mglog.info("param_card.dat:")
  runC = subprocess.Popen(['cat','param_card.dat'])
  runC.wait()
else:
  mglog.warning('No param_card.dat found')

### Define directory name
runName = 'group.phys-gener.MadGraph.'+str(DSID)+'.'+process+model+channel
if  model=="R":
  runName += "_S"+str(MS)
  runName += "f"+str(Mfmet)
  aR_int = int(aR)
  aR_dec = int((aR-aR_int)*10)
  runName += "a"+str(aR_int)+"p"+str(aR_dec)
elif model=="NR":
  runName += "_v"+str(Mvmet)
  aR_int = int(aR)
  aR_dec = int((aR-aR_int)*10)
  runName += "a"+str(aR_int)+"p"+str(aR_dec)
else:
  raise RuntimeError("ERROR: modelname "+model+" not known")

### Make new process directory
process_dir = new_process()

### Generate events using run_card and param_card prepared above
generate(run_card_loc='run_card.dat',param_card_loc='param_card.dat',mode=mode,proc_dir=process_dir,run_name=runName)

### Arrange output file with usual naming convention
arrange_output(run_name=runName,proc_dir=process_dir,outputDS=runName+'._00001.events.tar.gz')

### Preparing output parameters
evgenConfig.description    = "MadGraph5+Pythia8+EvtGen for monotop"
evgenConfig.keywords       = ["monotop", "top", "singleTop", "BSMtop", "exotic", "BSM"]
evgenConfig.inputfilecheck = "Monotop"
evgenConfig.minevents      = 5000
evgenConfig.contact        = ["tpelzer@cern.ch", "balvarez@cern.ch"]

### Define input generator file
runArgs.inputGeneratorFile=runName+'._00001.events.tar.gz'

### To run MadGraph in multi-core mode - if so, need to disactivate it now for Pythia8
if 'ATHENA_PROC_NUMBER' in os.environ:
  evgenLog.info('Noticed that you have run with an athena MP-like whole-node setup.  Will re-configure now to make sure that the remainder of the job runs serially.')
  njobs = os.environ.pop('ATHENA_PROC_NUMBER')
  # Try to modify the opts underfoot
  if not hasattr(opts,'nprocs'): mglog.warning('Did not see option!')
  else: opts.nprocs = 0
  print opts

### Running Pythia8 and EvtGen on input file prepared above
# Using A14 tune with NNPDF23LO PDF set
include("MC15JobOptions/Pythia8_A14_NNPDF23LO_EvtGen_Common.py")

### Configure Pythia8 to read input events from an LHEF file
include("MC15JobOptions/Pythia8_MadGraph.py")
